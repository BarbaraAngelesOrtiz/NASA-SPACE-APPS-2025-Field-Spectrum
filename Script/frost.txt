//VERSION=3

function setup() {
  return {
    input: ["B03", "B04", "B05", "B10", "dataMask"],
    output: [
      { id: "default", bands: 4 },
      { id: "index", bands: 1, sampleType: "FLOAT32" },
      { id: "eobrowserStats", bands: 2 },
      { id: "dataMask", bands: 1 }
    ]
  };
}

// Function to normalize values
function clamp(x, a, b) {
  return Math.max(a, Math.min(b, x));
}

// Cloud detection (more stringent)
function isCloud(samples) {
  const NDGR = index(samples.B03, samples.B04); // Green-Red
  const brightness = samples.B03 > 0.2 && samples.B04 > 0.2;
  const cold = samples.B10 < 265; // very cold clouds
  return (NDGR > 0 && brightness) || cold;
}

function evaluatePixel(samples) {
  // Vegetation index (B05 NIR - B04 Red)
  const val = index(samples.B05, samples.B04);
  const indexVal = samples.dataMask === 1 && val >= -1 && val <= 1 ? val : NaN;

  // Base color: green for vegetation
  let R = 0.1;
  let G = clamp(0.4 + val * 0.5, 0, 1);
  let B = 0.1;

  // Masks
  const coldMask = samples.B10 < 273; // < 0°C
  const cloudMask = isCloud(samples);

  // If there is frost (cold without clouds)
  if (coldMask && !cloudMask) {
    const tMin = 265; // -8°C
    const tMax = 273; // 0°C
    let tNorm = clamp((samples.B10 - tMin) / (tMax - tMin), 0, 1);
    tNorm = 1 - tNorm; // cooler = more intense color

    // Violet-blue gradient for cold
    R = 0.6 * tNorm;  // more violet in extreme cold
    G = 0.2 * tNorm;
    B = 0.9;
  }

  return {
    default: [R, G, B, samples.dataMask],
    index: [indexVal],
    eobrowserStats: [val, cloudMask ? 1 : 0],
    dataMask: [samples.dataMask]
  };
}
